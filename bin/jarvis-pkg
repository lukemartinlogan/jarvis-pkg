#!/usr/bin/env python3

"""
USAGE:

jpkg install pkg_name@version variant=a variant=b +variant -variant ^ dep_name variant@version = a ^ dep_name ...
"""

from jarvis_pkg.basic.jpkg_manager import JpkgManager
from jarvis_pkg.basic.jpkg_manifest_manager import JpkgManifestManager
from jarvis_pkg.basic.jpkg_install_manager import JpkgInstallManager
from jarvis_pkg.basic.package_spec import PackageSpec
from jarvis_pkg.query_parser.parse import QueryParser
from jarvis_pkg.util.argparse import ArgParse
import sys
import shlex


class JarvisArgs(ArgParse):
    def define_options(self):
        self.add_menu("repo add", use_remainder=True)
        self.add_menu("repo rm", use_remainder=True)
        self.add_menu("repo list", use_remainder=True)
        self.add_menu("install", use_remainder=True)
        self.end_required()
        self.add_arg("--root", argtype=bool, default=False,
                     msg="Whether or not to support root installs")
        self.add_menu("uninstall", use_remainder=True)
        self.end_required()
        self.add_arg("--root", argtype=bool, default=False,
                     msg="Whether or not to support root installs")
        self.add_menu("list", use_remainder=True)


if __name__ == '__main__':
    args = JarvisArgs()
    manifest = JpkgManifestManager.get_instance()
    installer = JpkgInstallManager.get_instance()
    if args.menu_name == "repo add":
        repos = shlex.split(args.remainder)
        for repo in repos:
            manifest.add_repo(repo)
        manifest.save()
    elif args.menu_name == "repo rm":
        repos = shlex.split(args.remainder)
        for repo in repos:
            manifest.rm_repo(repo)
        manifest.save()
    elif args.menu_name == "repo list":
        if args.remainder is not None:
            repos = shlex.split(args.remainder)
            for repo in repos:
                manifest.print_repo(repo)
        else:
            manifest.print_repo()
    elif args.menu_name == "install":
        queries = QueryParser(args.remainder).queries
        for pkg_query in queries:
            installer.install_spec(PackageSpec(pkg_query))
        installer.save()
    elif args.menu_name == "uninstall":
        queries = QueryParser(args.remainder).queries
        for pkg_query in queries:
            installer.uninstall_package(pkg_query)
        installer.save()
    elif args.menu_name == "list":
        queries = QueryParser(args.remainder).queries
        for pkg_query in queries:
            installer.list(pkg_query)
        installer.save()
